import Head from "next/head";
// import styles from '@/styles/Home.module.css'
import { useRouter } from "next/router";
import { prisma } from "@/server/db/client";
import { useSession, signIn, signOut } from "next-auth/react";
import { getServerSession } from "next-auth/next";
import { authOptions } from "./api/auth/[...nextauth]";
import axios from "axios";
import { useState, useEffect } from "react";

export default function addNote({ todos }) {

  const router = useRouter();
  const { data: session } = useSession();
  // const { id } = router.query;

  if(!session){
    return (
      <>
        Not signed in <br />
        <button onClick={() => signIn()}>Sign in</button>
      </>
    );
  }

  const [category, setCategory] = useState("")
  const [todo, setTodo] = useState(todos)
  
  useEffect(()=>{
    setTodo(todos)
  },[todos])

  const handleSubmit = async (e) => {
    
    e.preventDefault();
    const {data}  = await axios.post(`/api/todos`, {
      category
    })
    setTodo([...todo, data])
    console.log(data)
    // setClear()
    router.push('/profile')
}
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>Add a new Todo on the List</h1>

        <div>
          <form onSubmit={handleSubmit} className="form">
            <div>
              <label>What kind of Todo is it?</label>
              <input
                type="text"
                value={category}
                onChange={(e) => setCategory(e.target.value)}
              />
            </div>

            <div>
              <button type="submit">Add into your Todo Lists</button>
            </div>
          </form>
        </div>
        <button onClick={() => router.push("/profile")}>Back to profile</button>
      </main>
    </>
  );
}

export async function getServerSideProps(context) {
  const todos = await prisma.note.findMany({
    orderBy: {
      id: "desc",
    },
    include: {
      user: true,
    },
  });
  console.log(todos);

  const session = await getServerSession(context.req, context.res, authOptions);

  return {
    props: {
      session,
      todos,
    },
  };
}
